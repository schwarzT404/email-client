#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Gestionnaire de Base de Donn√©es Support Client Am√©lior√©
Gestion des r√©ponses support et contacts clients avec int√©gration Notion
"""

import sqlite3
import os
import json
from datetime import datetime
from typing import Dict, List, Optional, Tuple
from config import DATABASE_CONFIG


class SupportDatabaseManager:
    """Gestionnaire sp√©cialis√© pour les bases de donn√©es support client"""
    
    def __init__(self, db_path: str = None):
        self.db_path = db_path or DATABASE_CONFIG.get('database_path', 'data/support_client.db')
        self.connection = None
        self.init_database()
        self.connect()
    
    def init_database(self):
        """Initialise la base de donn√©es avec le nouveau sch√©ma"""
        try:
            # Cr√©er le r√©pertoire data s'il n'existe pas
            os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
            
            # Connexion temporaire pour cr√©er les tables
            conn = sqlite3.connect(self.db_path)
            
            # Lire et ex√©cuter le sch√©ma SQL
            schema_path = 'database/schema_support_enhanced.sql'
            if os.path.exists(schema_path):
                with open(schema_path, 'r', encoding='utf-8') as file:
                    schema_sql = file.read()
                conn.executescript(schema_sql)
                print("‚úÖ Base de donn√©es support initialis√©e avec succ√®s")
            else:
                print("‚ö†Ô∏è Fichier sch√©ma non trouv√©, cr√©ation des tables de base")
                self._create_basic_tables(conn)
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'initialisation de la base: {e}")
    
    def _create_basic_tables(self, conn):
        """Cr√©e les tables de base si le fichier sch√©ma n'est pas trouv√©"""
        conn.execute('''
            CREATE TABLE IF NOT EXISTS support_responses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                categorie TEXT NOT NULL,
                reponse_generique TEXT NOT NULL,
                tags TEXT,
                variables_template TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                is_active INTEGER DEFAULT 1
            )
        ''')
        
        conn.execute('''
            CREATE TABLE IF NOT EXISTS contacts_clients (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email_client TEXT NOT NULL,
                nom_prenom TEXT,
                id_commande INTEGER,
                message_initial TEXT NOT NULL,
                categorie TEXT,
                reponse_personnalisee TEXT,
                statut TEXT DEFAULT 'nouveau',
                ticket_id TEXT UNIQUE,
                urgence INTEGER DEFAULT 1,
                sentiment TEXT,
                model_used TEXT DEFAULT 'claude-4-sonnet',
                quality_score REAL DEFAULT 0,
                response_time REAL DEFAULT 0,
                notion_page_id TEXT,
                notion_sync_status TEXT DEFAULT 'pending',
                notion_last_sync DATETIME,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                processed_at DATETIME,
                closed_at DATETIME,
                assigned_to TEXT DEFAULT 'IA Agent'
            )
        ''')
    
    def connect(self):
        """√âtablit la connexion √† la base de donn√©es"""
        try:
            self.connection = sqlite3.connect(
                self.db_path,
                check_same_thread=False
            )
            self.connection.row_factory = sqlite3.Row
            self.connection.execute("PRAGMA foreign_keys = ON")
            print("‚úÖ Connexion √† la base de donn√©es support √©tablie")
        except sqlite3.Error as e:
            print(f"‚ùå Erreur de connexion: {e}")
            raise
    
    def disconnect(self):
        """Ferme la connexion"""
        if self.connection:
            self.connection.close()
            print("üîå Connexion ferm√©e")
    
    # =======================================================
    # GESTION DES R√âPONSES SUPPORT
    # =======================================================
    
    def get_response_by_category(self, categorie: str) -> Optional[Dict]:
        """R√©cup√®re la r√©ponse g√©n√©rique pour une cat√©gorie"""
        try:
            cursor = self.connection.cursor()
            cursor.execute(
                "SELECT * FROM support_responses WHERE categorie = ? AND is_active = 1",
                (categorie,)
            )
            result = cursor.fetchone()
            return dict(result) if result else None
        except Exception as e:
            print(f"‚ùå Erreur r√©cup√©ration r√©ponse: {e}")
            return None
    
    def get_all_support_responses(self) -> List[Dict]:
        """R√©cup√®re toutes les r√©ponses support actives"""
        try:
            cursor = self.connection.cursor()
            cursor.execute("SELECT * FROM support_responses WHERE is_active = 1 ORDER BY categorie")
            results = cursor.fetchall()
            return [dict(row) for row in results]
        except Exception as e:
            print(f"‚ùå Erreur r√©cup√©ration r√©ponses: {e}")
            return []
    
    def create_support_response(self, categorie: str, reponse_generique: str, 
                              tags: str = None, variables_template: str = None) -> Optional[int]:
        """Cr√©e une nouvelle r√©ponse support"""
        try:
            cursor = self.connection.cursor()
            cursor.execute(
                """INSERT INTO support_responses 
                   (categorie, reponse_generique, tags, variables_template) 
                   VALUES (?, ?, ?, ?)""",
                (categorie, reponse_generique, tags, variables_template)
            )
            self.connection.commit()
            response_id = cursor.lastrowid
            print(f"‚úÖ R√©ponse support cr√©√©e avec ID: {response_id}")
            return response_id
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation r√©ponse: {e}")
            return None
    
    def update_support_response(self, response_id: int, **kwargs) -> bool:
        """Met √† jour une r√©ponse support"""
        try:
            # Construire la requ√™te dynamiquement
            fields = []
            values = []
            for key, value in kwargs.items():
                if key in ['categorie', 'reponse_generique', 'tags', 'variables_template', 'is_active']:
                    fields.append(f"{key} = ?")
                    values.append(value)
            
            if not fields:
                return False
                
            fields.append("updated_at = CURRENT_TIMESTAMP")
            values.append(response_id)
            
            query = f"UPDATE support_responses SET {', '.join(fields)} WHERE id = ?"
            
            cursor = self.connection.cursor()
            cursor.execute(query, values)
            self.connection.commit()
            
            return cursor.rowcount > 0
            
        except Exception as e:
            print(f"‚ùå Erreur mise √† jour r√©ponse: {e}")
            return False
    
    # =======================================================
    # GESTION DES CONTACTS CLIENTS
    # =======================================================
    
    def create_contact_client(self, email_client: str, message_initial: str, 
                            nom_prenom: str = None, id_commande: int = None) -> Optional[int]:
        """Cr√©e un nouveau contact client"""
        try:
            # G√©n√©rer un ticket_id unique
            timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
            ticket_id = f"TKT-{timestamp}-{len(message_initial) % 1000:03d}"
            
            cursor = self.connection.cursor()
            cursor.execute(
                """INSERT INTO contacts_clients 
                   (email_client, nom_prenom, id_commande, message_initial, ticket_id) 
                   VALUES (?, ?, ?, ?, ?)""",
                (email_client, nom_prenom, id_commande, message_initial, ticket_id)
            )
            self.connection.commit()
            contact_id = cursor.lastrowid
            print(f"‚úÖ Contact client cr√©√© avec ID: {contact_id}, Ticket: {ticket_id}")
            return contact_id
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation contact: {e}")
            return None
    
    def get_contact_by_id(self, contact_id: int) -> Optional[Dict]:
        """R√©cup√®re un contact par son ID"""
        try:
            cursor = self.connection.cursor()
            cursor.execute("SELECT * FROM contacts_clients WHERE id = ?", (contact_id,))
            result = cursor.fetchone()
            return dict(result) if result else None
        except Exception as e:
            print(f"‚ùå Erreur r√©cup√©ration contact: {e}")
            return None
    
    def get_contact_by_ticket(self, ticket_id: str) -> Optional[Dict]:
        """R√©cup√®re un contact par son ticket ID"""
        try:
            cursor = self.connection.cursor()
            cursor.execute("SELECT * FROM contacts_clients WHERE ticket_id = ?", (ticket_id,))
            result = cursor.fetchone()
            return dict(result) if result else None
        except Exception as e:
            print(f"‚ùå Erreur r√©cup√©ration contact: {e}")
            return None
    
    def get_contacts_by_status(self, statut: str = None) -> List[Dict]:
        """R√©cup√®re les contacts par statut"""
        try:
            cursor = self.connection.cursor()
            if statut:
                cursor.execute(
                    "SELECT * FROM contacts_clients WHERE statut = ? ORDER BY created_at DESC",
                    (statut,)
                )
            else:
                cursor.execute(
                    "SELECT * FROM contacts_clients ORDER BY created_at DESC"
                )
            results = cursor.fetchall()
            return [dict(row) for row in results]
        except Exception as e:
            print(f"‚ùå Erreur r√©cup√©ration contacts: {e}")
            return []
    
    def update_contact_status(self, contact_id: int, nouveau_statut: str) -> bool:
        """Met √† jour le statut d'un contact"""
        try:
            cursor = self.connection.cursor()
            cursor.execute(
                "UPDATE contacts_clients SET statut = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?",
                (nouveau_statut, contact_id)
            )
            self.connection.commit()
            
            # Enregistrer la date de fermeture si n√©cessaire
            if nouveau_statut == 'ferme':
                cursor.execute(
                    "UPDATE contacts_clients SET closed_at = CURRENT_TIMESTAMP WHERE id = ?",
                    (contact_id,)
                )
                self.connection.commit()
            
            return cursor.rowcount > 0
        except Exception as e:
            print(f"‚ùå Erreur mise √† jour statut: {e}")
            return False
    
    def complete_contact_processing(self, contact_id: int, analysis_result: Dict) -> bool:
        """Compl√®te le traitement d'un contact avec les r√©sultats d'analyse"""
        try:
            cursor = self.connection.cursor()
            cursor.execute(
                """UPDATE contacts_clients SET
                   categorie = ?, urgence = ?, sentiment = ?, 
                   reponse_personnalisee = ?, response_time = ?, 
                   quality_score = ?, model_used = ?,
                   statut = 'traite', processed_at = CURRENT_TIMESTAMP,
                   updated_at = CURRENT_TIMESTAMP
                   WHERE id = ?""",
                (
                    analysis_result.get('category'),
                    analysis_result.get('urgency'),
                    analysis_result.get('sentiment'),
                    analysis_result.get('response'),
                    analysis_result.get('response_time', 0),
                    analysis_result.get('quality_score', 0),
                    analysis_result.get('model', 'claude-4-sonnet'),
                    contact_id
                )
            )
            self.connection.commit()
            return cursor.rowcount > 0
        except Exception as e:
            print(f"‚ùå Erreur finalisation contact: {e}")
            return False
    
    # =======================================================
    # INT√âGRATION NOTION
    # =======================================================
    
    def update_notion_sync(self, contact_id: int, notion_page_id: str, 
                          sync_status: str = 'synced') -> bool:
        """Met √† jour les informations de synchronisation Notion"""
        try:
            cursor = self.connection.cursor()
            cursor.execute(
                """UPDATE contacts_clients SET 
                   notion_page_id = ?, notion_sync_status = ?, 
                   notion_last_sync = CURRENT_TIMESTAMP 
                   WHERE id = ?""",
                (notion_page_id, sync_status, contact_id)
            )
            self.connection.commit()
            return cursor.rowcount > 0
        except Exception as e:
            print(f"‚ùå Erreur mise √† jour Notion: {e}")
            return False
    
    def get_contacts_to_sync(self) -> List[Dict]:
        """R√©cup√®re les contacts qui doivent √™tre synchronis√©s avec Notion"""
        try:
            cursor = self.connection.cursor()
            cursor.execute(
                """SELECT * FROM contacts_clients 
                   WHERE notion_sync_status IN ('pending', 'error') 
                   ORDER BY created_at ASC"""
            )
            results = cursor.fetchall()
            return [dict(row) for row in results]
        except Exception as e:
            print(f"‚ùå Erreur r√©cup√©ration contacts √† sync: {e}")
            return []
    
    # =======================================================
    # STATISTIQUES ET REPORTING
    # =======================================================
    
    def get_dashboard_stats(self) -> Dict:
        """R√©cup√®re les statistiques pour le dashboard"""
        try:
            cursor = self.connection.cursor()
            cursor.execute("SELECT * FROM v_dashboard_stats")
            result = cursor.fetchone()
            return dict(result) if result else {}
        except Exception as e:
            print(f"‚ùå Erreur statistiques dashboard: {e}")
            return {}
    
    def get_stats_by_category(self) -> List[Dict]:
        """R√©cup√®re les statistiques par cat√©gorie"""
        try:
            cursor = self.connection.cursor()
            cursor.execute("SELECT * FROM v_stats_categories ORDER BY total_contacts DESC")
            results = cursor.fetchall()
            return [dict(row) for row in results]
        except Exception as e:
            print(f"‚ùå Erreur statistiques cat√©gories: {e}")
            return []
    
    def get_recent_contacts(self, limit: int = 10) -> List[Dict]:
        """R√©cup√®re les contacts r√©cents"""
        try:
            cursor = self.connection.cursor()
            cursor.execute(
                "SELECT * FROM contacts_clients ORDER BY created_at DESC LIMIT ?",
                (limit,)
            )
            results = cursor.fetchall()
            return [dict(row) for row in results]
        except Exception as e:
            print(f"‚ùå Erreur contacts r√©cents: {e}")
            return []
    
    # =======================================================
    # TEMPLATE ENGINE POUR R√âPONSES
    # =======================================================
    
    def generate_personalized_response(self, categorie: str, variables: Dict) -> Optional[str]:
        """G√©n√®re une r√©ponse personnalis√©e bas√©e sur un template"""
        try:
            # R√©cup√©rer le template
            response_template = self.get_response_by_category(categorie)
            if not response_template:
                return None
            
            # Remplacer les variables dans le template
            response_text = response_template['reponse_generique']
            
            for var_name, var_value in variables.items():
                placeholder = f"{{{{{var_name}}}}}"
                response_text = response_text.replace(placeholder, str(var_value))
            
            return response_text
            
        except Exception as e:
            print(f"‚ùå Erreur g√©n√©ration r√©ponse: {e}")
            return None
    
    # =======================================================
    # HISTORIQUE DES INTERACTIONS
    # =======================================================
    
    def add_interaction_history(self, contact_id: int, action_type: str, 
                              old_value: str = None, new_value: str = None, 
                              notes: str = None, user_agent: str = 'System') -> bool:
        """Ajoute une entr√©e dans l'historique des interactions"""
        try:
            cursor = self.connection.cursor()
            cursor.execute(
                """INSERT INTO interactions_history 
                   (contact_id, action_type, old_value, new_value, notes, user_agent) 
                   VALUES (?, ?, ?, ?, ?, ?)""",
                (contact_id, action_type, old_value, new_value, notes, user_agent)
            )
            self.connection.commit()
            return True
        except Exception as e:
            print(f"‚ùå Erreur ajout historique: {e}")
            return False
    
    def get_contact_history(self, contact_id: int) -> List[Dict]:
        """R√©cup√®re l'historique d'un contact"""
        try:
            cursor = self.connection.cursor()
            cursor.execute(
                """SELECT * FROM interactions_history 
                   WHERE contact_id = ? 
                   ORDER BY created_at DESC""",
                (contact_id,)
            )
            results = cursor.fetchall()
            return [dict(row) for row in results]
        except Exception as e:
            print(f"‚ùå Erreur r√©cup√©ration historique: {e}")
            return []


# Fonction utilitaire pour initialiser la base de donn√©es
def init_support_database(db_path: str = None):
    """Initialise la base de donn√©es support"""
    try:
        manager = SupportDatabaseManager(db_path)
        print("‚úÖ Base de donn√©es support initialis√©e avec succ√®s")
        return manager
    except Exception as e:
        print(f"‚ùå Erreur initialisation base support: {e}")
        return None 