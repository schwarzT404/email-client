#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Agent Claude - Traitement Intelligent des Messages Client
Utilise l'API Claude d'Anthropic pour la classification et g√©n√©ration de r√©ponses
"""

import os
import json
from datetime import datetime
from typing import Dict, Any, Optional
import logging
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

try:
    import anthropic
    ANTHROPIC_AVAILABLE = True
except ImportError:
    ANTHROPIC_AVAILABLE = False
    print("‚ö†Ô∏è Module anthropic non disponible. Installation: pip install anthropic")

class ClaudeAgent:
    """Agent Claude pour le traitement intelligent des messages client"""
    
    def __init__(self, api_key: Optional[str] = None, db_manager=None):
        """
        Initialise l'agent Claude
        """
        print("ü§ñ [ClaudeAgent] Initialisation en cours...")
        self.db_manager = db_manager
        self.api_key = api_key or os.getenv('ANTHROPIC_API_KEY')
        self.client = None
        self.is_ready = False
        
        if not ANTHROPIC_AVAILABLE:
            print("‚ùå [ClaudeAgent] Librairie 'anthropic' non trouv√©e. Agent inactif.")
            return

        if not self.api_key:
            print("‚ùå [ClaudeAgent] Cl√© API ANTHROPIC_API_KEY non trouv√©e. Agent inactif.")
            return
        
        print("üîë [ClaudeAgent] Cl√© API trouv√©e.")

        try:
            self.client = anthropic.Anthropic(api_key=self.api_key)
            self.is_ready = True
            print("‚úÖ [ClaudeAgent] Initialisation r√©ussie. Agent pr√™t.")
        except Exception as e:
            print(f"‚ùå [ClaudeAgent] ERREUR D'INITIALISATION : {e}")
            self.client = None
            self.is_ready = False
    
    def get_customer_context(self, email: str) -> Dict[str, Any]:
        """R√©cup√®re le contexte client depuis la base de donn√©es (D√âSACTIV√â)"""
        return {}
    
    def classify_message(self, message: str, subject: str = "", customer_context: Dict = None) -> Dict[str, Any]:
        """
        Classifie un message client avec Claude
        
        Args:
            message: Message du client
            subject: Sujet du message
            customer_context: Contexte client (commandes, historique)
            
        Returns:
            Dict avec la classification et les d√©tails
        """
        if not self.is_ready:
            return self._fallback_classification(message)
            
        try:
            # Pr√©parer le contexte
            context_str = ""
            if customer_context and customer_context.get("client"):
                client = customer_context["client"]
                context_str = f"""
CONTEXTE CLIENT:
- Nom: {client.get('prenom')} {client.get('nom')}
- Email: {client.get('email')}
- Type: {client.get('type')}
- Nombre de commandes: {customer_context.get('nb_commandes', 0)}
- Total d√©pens√©: {customer_context.get('total_depense', 0)}‚Ç¨
"""
                
                if customer_context.get("commandes"):
                    context_str += "\nDERNI√àRES COMMANDES:\n"
                    for cmd in customer_context["commandes"][-3:]:  # 3 derni√®res
                        context_str += f"- Commande #{cmd['id']}: {cmd['montant']}‚Ç¨ ({cmd['statut']})\n"
            
            # Prompt pour la classification
            prompt = f"""Tu es un assistant IA sp√©cialis√© dans le support client e-commerce. 

{context_str}

SUJET: {subject}
MESSAGE CLIENT: {message}

Analyse ce message et fournis une classification JSON avec:
1. "category": Une des cat√©gories principales
   - "retard_livraison": Probl√®mes de livraison, retards, colis perdu
   - "remboursement": Demandes de remboursement, retours
   - "produit_defectueux": Produits cass√©s, d√©fectueux, non conformes
   - "information_commande": Statut commande, suivi, modifications
   - "reclamation": Insatisfaction, plaintes, r√©clamations
   - "autre": Autres demandes

2. "urgency": Niveau d'urgence (1-5, 5=tr√®s urgent)
3. "sentiment": Sentiment client ("positif", "neutre", "negatif", "tres_negatif")
4. "key_elements": Liste des √©l√©ments cl√©s identifi√©s
5. "requires_human": true/false si n√©cessite intervention humaine
6. "confidence": Score de confiance (0-1)

R√©ponds uniquement avec le JSON, sans autres commentaires."""

            # Appel √† l'API Claude
            response = self.client.messages.create(
                model="claude-3-sonnet-20240229",
                max_tokens=1024,
                temperature=0.1,
                messages=[
                    {"role": "user", "content": prompt}
                ]
            )
            
            # Parser la r√©ponse JSON
            result = json.loads(response.content[0].text)
            
            # Ajouter des m√©tadonn√©es
            result.update({
                "processed_at": datetime.now().isoformat(),
                "model": "claude-3-sonnet-20240229",
                "has_context": bool(customer_context and customer_context.get("client"))
            })
            
            return result
            
        except json.JSONDecodeError as e:
            print(f"Erreur parsing JSON Claude: {e}")
            return self._fallback_classification(message)
        except Exception as e:
            print(f"Erreur classification Claude: {e}")
            return self._fallback_classification(message)
    
    def generate_response(self, message: str, classification: Dict, customer_context: Dict = None) -> str:
        """
        G√©n√®re une r√©ponse personnalis√©e avec Claude
        
        Args:
            message: Message original du client
            classification: R√©sultat de la classification
            customer_context: Contexte client
            
        Returns:
            R√©ponse g√©n√©r√©e par Claude
        """
        if not self.is_ready:
            return self._fallback_response(classification.get("category", "autre"))
            
        try:
            # Pr√©parer le contexte client
            context_str = ""
            client_name = ""
            
            if customer_context and customer_context.get("client"):
                client = customer_context["client"]
                client_name = client.get("prenom", "")
                context_str = f"""
INFORMATIONS CLIENT:
- Nom: {client.get('prenom')} {client.get('nom')}
- Type de client: {client.get('type')}
- Historique: {customer_context.get('nb_commandes', 0)} commandes, {customer_context.get('total_depense', 0)}‚Ç¨ d√©pens√©s
"""
                
                # Ajouter info sur les commandes r√©centes si pertinent
                if customer_context.get("commandes") and classification.get("category") in ["retard_livraison", "information_commande"]:
                    recent_orders = customer_context["commandes"][-2:]
                    context_str += "\nCOMMANDES R√âCENTES:\n"
                    for cmd in recent_orders:
                        context_str += f"- Commande #{cmd['id']}: {cmd['montant']}‚Ç¨ - {cmd['statut']}\n"
            
            # Instructions sp√©cifiques selon la cat√©gorie
            category_instructions = {
                "retard_livraison": "Excuses sinc√®res, explication des d√©marches entreprises, d√©lai de r√©solution",
                "remboursement": "Compr√©hension, processus de remboursement, d√©lais",
                "produit_defectueux": "Excuses, solution de remplacement imm√©diate, geste commercial",
                "information_commande": "Informations pr√©cises, transparence, suivi",
                "reclamation": "√âcoute active, prise en charge personnalis√©e, solution",
                "autre": "R√©ponse personnalis√©e selon le contexte"
            }
            
            category = classification.get("category", "autre")
            urgency = classification.get("urgency", 3)
            sentiment = classification.get("sentiment", "neutre")
            
            # Adapter le ton selon l'urgence et le sentiment
            tone_instruction = ""
            if urgency >= 4 or sentiment == "tres_negatif":
                tone_instruction = "Ton tr√®s attentionn√© et prioritaire. Intervention imm√©diate."
            elif sentiment == "negatif":
                tone_instruction = "Ton empathique et rassurant."
            else:
                tone_instruction = "Ton professionnel et bienveillant."
            
            # Prompt pour la g√©n√©ration de r√©ponse
            prompt = f"""Tu es un expert en support client e-commerce fran√ßais. Ta mission est de cr√©er une r√©ponse UNIQUE et PERSONNALIS√âE.

{context_str}

MESSAGE ORIGINAL DU CLIENT: {message}

ANALYSE:
- Cat√©gorie: {category}
- Urgence: {urgency}/5
- Sentiment: {sentiment}
- √âl√©ments cl√©s: {classification.get('key_elements', [])}

CONTRAINTES ABSOLUES:
‚ùå INTERDIT: Utiliser des phrases g√©n√©riques comme "Nous avons bien re√ßu votre demande", "Dans les plus brefs d√©lais", "Cordialement l'√©quipe support"
‚ùå INTERDIT: Formules toutes faites et automatiques
‚ùå INTERDIT: R√©ponses qui pourraient √™tre envoy√©es √† n'importe qui

‚úÖ OBLIGATOIRE: 
- R√©pondre SP√âCIFIQUEMENT aux points mentionn√©s dans le message
- Utiliser des d√©tails concrets du message du client
- Personnaliser selon {client_name if client_name else "le client"}
- Adopter un ton naturel et humain
- Proposer des solutions concr√®tes et pr√©cises
- {tone_instruction}

STRUCTURE REQUISE:
1. Salutation personnalis√©e avec pr√©nom si disponible
2. R√©f√©rence EXPLICITE au probl√®me sp√©cifique mentionn√©
3. Explication d√©taill√©e de la situation
4. Actions concr√®tes entreprises ou √† entreprendre
5. D√©lais pr√©cis (pas de "dans les plus brefs d√©lais")
6. Signature personnalis√©e

EXEMPLES DE BONNES PRATIQUES:
- "J'ai v√©rifi√© votre commande #12345 et je constate que..."
- "Concernant le produit XYZ que vous avez re√ßu..."
- "Votre colis parti le 15/01 devrait arriver demain avant 14h"
- "Je vous rembourse d√®s maintenant les 47,99‚Ç¨ sur votre carte"

LONGUEUR: 150-300 mots maximum, direct et efficace.

G√©n√®re maintenant une r√©ponse UNIQUE et PERSONNALIS√âE:"""

            # Appel √† Claude 4 pour g√©n√©ration avec r√©flexion
            response = self.client.messages.create(
                model="claude-3-5-sonnet-20240620",  # Remplac√© par le dernier mod√®le Sonnet
                max_tokens=3000,
                temperature=0.3,
                messages=[
                    {"role": "user", "content": prompt}
                ]
            )
            
            return response.content[0].text.strip()
            
        except Exception as e:
            print(f"Erreur g√©n√©ration r√©ponse Claude: {e}")
            return self._fallback_response(classification.get("category", "autre"))
    
    def process_customer_message(self, email: str, message: str, subject: str = "", context: Dict = None) -> Dict[str, Any]:
        """
        Traite compl√®tement un message client avec Claude
        
        Args:
            email: Email du client
            message: Message du client
            subject: Sujet du message
            context: Contexte client (commandes, historique)
            
        Returns:
            Dict avec classification, r√©ponse et m√©tadonn√©es
        """
        try:
            customer_context = context or {}
            
            # 2. Classifier le message
            classification = self.classify_message(message, subject, customer_context)
            
            # 3. G√©n√©rer la r√©ponse
            response = self.generate_response(message, classification, customer_context)
            
            # 4. Cr√©er le ticket ID
            ticket_id = f"CL-{datetime.now().strftime('%Y%m%d%H%M%S')}"
            
            # 5. Calculer le score de qualit√©
            quality_score = self._calculate_quality_score(
                classification, 
                len(response), 
                bool(customer_context.get("client"))
            )
            
            return {
                "email": email,
                "subject": subject,
                "message": message,
                "category": classification.get("category"),
                "urgency": classification.get("urgency"),
                "sentiment": classification.get("sentiment"),
                "key_elements": classification.get("key_elements", []),
                "requires_human": classification.get("requires_human", False),
                "confidence": classification.get("confidence", 0.85),
                "response": response,
                "quality_score": quality_score,
                "ticket_id": ticket_id,
                "processed_at": datetime.now().isoformat(),
                "customer_context": customer_context,
                "model": "claude-3-sonnet-20240229",
                "has_customer_data": bool(customer_context.get("client"))
            }
            
        except Exception as e:
            print(f"Erreur traitement message: {e}")
            return {
                "email": email,
                "error": str(e),
                "processed_at": datetime.now().isoformat(),
                "model": "claude-3-sonnet-20240229 (erreur)"
            }
    
    def _fallback_classification(self, message: str) -> Dict[str, Any]:
        """Classification de secours bas√©e sur mots-cl√©s"""
        message_lower = message.lower()
        
        if any(word in message_lower for word in ['retard', 'livraison', 're√ßu', 'arriv√©', 'exp√©dition']):
            category = 'retard_livraison'
        elif any(word in message_lower for word in ['remboursement', 'rembourser', 'annuler']):
            category = 'remboursement'
        elif any(word in message_lower for word in ['d√©fectueux', 'cass√©', 'ab√Æm√©', 'probl√®me']):
            category = 'produit_defectueux'
        elif any(word in message_lower for word in ['m√©content', 'insatisfait', 'plainte']):
            category = 'reclamation'
        else:
            category = 'information_commande'
            
        return {
            "category": category,
            "urgency": 3,
            "sentiment": "neutre",
            "key_elements": [],
            "requires_human": False,
            "confidence": 0.6,
            "model": "fallback"
        }
    
    def _fallback_response(self, category: str) -> str:
        """R√©ponse de secours personnalis√©e bas√©e sur la cat√©gorie"""
        import random
        
        responses = {
            'retard_livraison': [
                """Bonjour,

Je comprends votre inqui√©tude concernant votre commande qui tarde √† arriver. 

Je viens de v√©rifier le suivi de votre colis aupr√®s de notre transporteur. Votre commande est actuellement en transit et devrait vous √™tre livr√©e sous 48h maximum.

Je vous envoie par email le num√©ro de suivi pour que vous puissiez suivre l'acheminement en temps r√©el.

Si votre colis n'arrive pas mercredi, contactez-moi directement et je vous propose une solution imm√©diate.

Bien √† vous,
Sophie - Service Client""",

                """Bonjour,

D√©sol√©e pour ce retard qui doit vous contrarier, c'est tout √† fait compr√©hensible.

Votre commande a √©t√© exp√©di√©e mais notre transporteur a eu un incident sur votre secteur. J'ai fait remonter votre dossier en priorit√© et votre colis sera livr√© demain avant 17h.

En compensation de ce d√©sagr√©ment, je vous accorde un bon de r√©duction de 15% valable sur votre prochaine commande.

Je reste √† votre disposition si besoin.

Cordialement,
Marc - Support Client"""
            ],
            
            'remboursement': [
                """Bonjour,

J'ai bien not√© votre demande de remboursement et je la comprends parfaitement.

Je lance imm√©diatement la proc√©dure : vous recevrez un email de confirmation d'ici 2h et le remboursement sera effectif sur votre compte sous 72h.

Le montant rembours√© est de [montant] ‚Ç¨ et appara√Ætra sur votre relev√© bancaire avec la mention "REMB COMMANDE".

N'h√©sitez pas si vous avez des questions.

Cordialement,
Julie - Service Client""",
                
                """Bonjour,

Votre demande de remboursement est tout √† fait justifi√©e, je m'en occupe de suite.

Je viens de valider le remboursement de votre commande. Vous devriez voir le cr√©dit appara√Ætre sur votre compte bancaire d'ici vendredi.

Si ce n'est pas le cas, recontactez-moi avec cette r√©f√©rence : RBT-{datetime.now().strftime('%Y%m%d')}.

Merci de votre confiance.

Bien √† vous,
Thomas - Support Client"""
            ],
            
            'produit_defectueux': [
                """Bonjour,

Je suis vraiment navr√© que votre produit soit arriv√© dans cet √©tat, c'est inacceptable de notre part.

Je vous exp√©die d√®s aujourd'hui un produit de remplacement identique, livraison pr√©vue demain. Vous n'avez rien √† renvoyer, gardez le produit d√©fectueux.

En plus, je vous offre un geste commercial de 20‚Ç¨ sur votre prochaine commande pour ce d√©sagr√©ment.

Voici votre num√©ro de suivi : il arrivera par SMS dans 1h.

Tr√®s cordialement,
Emma - Service Client""",
                
                """Bonjour,

Quelle d√©ception cela doit √™tre de recevoir un produit ab√Æm√© ! Mes excuses sinc√®res.

Je traite votre dossier en urgence : nouveau produit exp√©di√© ce matin par Chronopost, vous le recevrez demain avant midi.

Je vous rembourse aussi les frais de port de votre commande initiale (7,90‚Ç¨) qui seront cr√©dit√©s sous 24h.

Tenez-moi au courant de la r√©ception.

Bien √† vous,
Paul - Support Client"""
            ],
            
            'reclamation': [
                """Bonjour,

Je prends tr√®s au s√©rieux votre r√©clamation et je vous pr√©sente toutes mes excuses pour cette exp√©rience d√©cevante.

J'ai imm√©diatement fait remonter votre situation √† ma responsable et nous mettons tout en ≈ìuvre pour rectifier le tir.

Je vous rappelle personnellement demain matin avant 11h pour vous pr√©senter une solution concr√®te et satisfaisante.

Votre satisfaction est ma priorit√© absolue.

Tr√®s cordialement,
Lucie - Service Client""",
                
                """Bonjour,

Votre m√©contentement est parfaitement l√©gitime et je m'en excuse au nom de toute l'√©quipe.

Je prends personnellement en charge votre dossier pour √©viter que cela se reproduise. D'ici ce soir, vous aurez une proposition de compensation adapt√©e.

En attendant, voici mon email direct : support.prioritaire@monsite.com pour toute urgence.

Comptez sur moi pour r√©soudre cette situation.

Cordialement,
Antoine - Responsable Support"""
            ],
            
            'information_commande': [
                """Bonjour,

Concernant votre demande d'information sur votre commande, voici le point complet :

Votre commande est confirm√©e et en cours de pr√©paration dans notre entrep√¥t. L'exp√©dition aura lieu demain et la livraison est pr√©vue jeudi.

Vous recevrez un SMS avec le cr√©neau de livraison pr√©cis mercredi soir.

Autres infos utiles : commande pay√©e, produits en stock, transporteur Colissimo.

J'esp√®re avoir r√©pondu √† vos questions !

Bien √† vous,
Sarah - Service Client""",
                
                """Bonjour,

Voici les informations que vous souhaitiez sur votre commande :

Statut actuel : exp√©di√©e hier, en transit vers votre adresse
Livraison estim√©e : demain entre 9h et 17h  
Transporteur : DPD (num√©ro de suivi en pi√®ce jointe)

Si vous souhaitez modifier l'adresse de livraison, c'est encore possible jusqu'√† ce soir 18h.

N'h√©sitez pas pour toute autre question.

Cordialement,
Kevin - Support Client"""
            ]
        }
        
        # S√©lectionner al√©atoirement une r√©ponse dans la cat√©gorie
        category_responses = responses.get(category, responses['information_commande'])
        return random.choice(category_responses)
    
    def _calculate_quality_score(self, classification: Dict, response_length: int, has_context: bool) -> float:
        """Calcule un score de qualit√© pour la r√©ponse"""
        score = 0.7  # Score de base
        
        # Bonus pour la confiance de classification
        confidence = classification.get("confidence", 0.5)
        score += confidence * 0.2
        
        # Bonus pour la longueur de r√©ponse appropri√©e
        if 200 <= response_length <= 800:
            score += 0.1
        
        # Bonus pour le contexte client
        if has_context:
            score += 0.1
        
        # Bonus pour l'utilisation de Claude
        if self.is_ready:
            score += 0.1
        
        return min(score, 1.0)  # Max 1.0

    def get_status(self) -> Dict[str, Any]:
        """Retourne le statut de l'agent Claude"""
        return {
            "claude_available": ANTHROPIC_AVAILABLE,
            "claude_ready": self.is_ready,
            "api_key_configured": bool(self.api_key),
            "model": "claude-3-sonnet-20240229" if self.is_ready else None,
            "last_check": datetime.now().isoformat()
        } 